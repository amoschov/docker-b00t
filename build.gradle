buildscript {
    ext {
        springBootVersion = '1.4.1.RELEASE'
    }
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'com.bmuschko:gradle-docker-plugin:2.5'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-java-application'

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerListImages
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer

sourceCompatibility = 1.8
targetCompatibility = 1.8

version = '0.0.1-SNAPSHOT'

jar {
    baseName = "$project.name"
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.flywaydb:flyway-core")
    runtime("mysql:mysql-connector-java")
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

docker {
    if (System.env.DOCKER_HOST) {
        url = "$System.env.DOCKER_HOST".replace("tcp","https")
        if (System.env.DOCKER_CERT_PATH) {
            certPath = new java.io.File(System.env.DOCKER_CERT_PATH)
        }
    } else {
        url = 'unix:///var/run/docker.sock'
    }
}

task prepareDockerResources(type: Copy) {
    from ("$project.projectDir/src/main/docker/Dockerfile") {
        filter{ it.replaceAll('@@jarfile@@', "$jar.baseName" + "$project.version" + '.jar')}
    }
    into "$project.buildDir/docker"
}

// docker tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]

def repName="localhost:5000/$project.name"
def tagName="$repName:$project.version"

task buildDocImage(type: DockerBuildImage) {
    dependsOn build
    dependsOn prepareDockerResources
    quiet = false
    noCache = true
    inputDir = prepareDockerResources.destinationDir
    tag = tagName
}

task tagDocImage(type: DockerTagImage) {
    dependsOn buildDocImage
    force = true
    imageId = buildDocImage.getTag()
    repository = repName
    tag = "latest"
}

task pushDocImage(type: DockerPushImage ) {
    dependsOn tagDocImage
    imageName = repName
    // optional
    tag = project.version
}

task createDocContainer(type: DockerCreateContainer) {
    dependsOn buildDocImage
    imageId = buildDocImage.getTag()
    links = ['perkonsmysql:localhost']
    exposedPorts =["tcp":8080]
    portBindings = '80:8080'
    containerName = "$project.name-$project.version"
}

task startDocContainer(type: DockerStartContainer) {
    dependsOn createDocContainer
    targetContainerId { createDocker.getContainerId() }
}

task stopDocContainer(type: DockerStopContainer) {
    dependsOn createDocContainer
    targetContainerId { createDocker.getContainerId() }
}

task startMySQLDocker(type: DockerStartContainer) {
//TODO: still not ready
}

task stopMySQLDocker(type: DockerStopContainer) {
//TODO: still not ready
}

task getMySQLId(type: DockerListImages) {

}
