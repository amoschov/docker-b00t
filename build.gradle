buildscript {
    ext {
        springBootVersion = '1.2.3.RELEASE'
    }
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
        classpath 'com.bmuschko:gradle-docker-plugin:2.5'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse-wtp'
apply plugin: 'spring-boot'
apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-java-application'


import java.io.File
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer

version = '1.0'
sourceCompatibility = 1.8
targetCompatibility = 1.8

jar {
    baseName = 'perk0ns-web'
    version =  '0.0.1-SNAPSHOT'
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
 compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.flywaydb:flyway-core")
    runtime("mysql:mysql-connector-java")
    testCompile("org.springframework.boot:spring-boot-starter-test")
}


docker {
    if (System.env.DOCKER_HOST) {
        url = "$System.env.DOCKER_HOST".replace("tcp","https")
        if (System.env.DOCKER_CERT_PATH) {
            certPath = new File(System.env.DOCKER_CERT_PATH)

        }
    } else {
        url = 'unix:///var/run/docker.sock'
    }
}

task prepareDockerResources(type: Copy) {
    from jar
    from "$project.projectDir/src/main/docker/Dockerfile"
    into "$project.buildDir/docker"
}

def tagValue = "dockerboot/$project.name:$project.version";

task buildDocker(type: DockerBuildImage) {
    dependsOn build
    dependsOn prepareDockerResources
    quiet = true
    noCache = true
    inputDir = prepareDockerResources.destinationDir
    tag = tagValue
}

task tagDocker(type: DockerTagImage) {
    dependsOn buildDocker
    force = true
    imageId = buildDocker.getTag()
    tag = tagValue
}

task pushDocker(type: DockerPushImage ) {
    dependsOn tagDocker
    imageName = "http://localhost:15000/v1/$project.name"
}

task createDocker(type: DockerCreateContainer) {
    dependsOn buildDocker
    imageId = buildDocker.getTag()
}

task runDocker(type: DockerStartContainer) {
    dependsOn createDocker
    targetContainerId { createDocker.getContainerId() }
}

task stopDocker(type: DockerStopContainer) {
    dependsOn createDocker
    targetContainerId { createDocker.getContainerId() }
}
